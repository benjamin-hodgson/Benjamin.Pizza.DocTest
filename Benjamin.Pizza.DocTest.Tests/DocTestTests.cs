using Benjamin.Pizza.DocTest.SourceGenerator;
using Benjamin.Pizza.DocTest.TestProject;

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Testing;
using Microsoft.CodeAnalysis.Testing;

using Xunit;

namespace Benjamin.Pizza.DocTest.Tests;

public class DocTestTests
{
    [Theory]
    [DocTestData(typeof(DocTest))]
    public async Task DoDocTests(DocTest test)
    {
        await test.Run();
    }

    [Fact]
    public async Task TestSourceGenerator()
    {
        var test = new CSharpSourceGeneratorTest<DocTestSourceGenerator, DefaultVerifier>();
        test.TestState.AdditionalReferences.Add(MetadataReference.CreateFromFile(typeof(DocTestAttribute).Assembly.Location));
        test.TestState.AdditionalReferences.Add(MetadataReference.CreateFromFile(typeof(FactAttribute).Assembly.Location));
        test.TestState.AdditionalReferences.Add(MetadataReference.CreateFromFile(typeof(Assert).Assembly.Location));
        test.TestState.AdditionalReferences.Add(MetadataReference.CreateFromFile(typeof(Class1).Assembly.Location));
        test.TestState.AdditionalFiles.Add((
            typeof(Class1).Assembly.GetName().Name + ".xml",
            await File.ReadAllTextAsync(typeof(Class1).Assembly.GetName().Name + ".xml", TestContext.Current.CancellationToken)
        ));
        test.ReferenceAssemblies = ReferenceAssemblies.Net.Net90;

        // https://github.com/dotnet/sdk/blob/3c66f856d197b3735077fff4e4806443d841a09e/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.CSharp.props#L26
        test.TestState.Sources.Add(
            """
            global using System;
            global using System.Collections.Generic;
            global using System.IO;
            global using System.Linq;
            global using System.Net.Http;
            global using System.Threading;
            global using System.Threading.Tasks;
            """
        );
        test.TestCode = """
            using Benjamin.Pizza.DocTest;
            using Benjamin.Pizza.DocTest.TestProject;

            namespace Benjamin.Pizza.DocTest.TestProject.Tests;

            [DocTest(typeof(Class1))]
            public partial class MyDocTests
            {
            }
            """;

        test.TestState.GeneratedSources.Add((
            typeof(DocTestSourceGenerator),
            "MyDocTests.DocTest.g.cs",
            """
            // ------------------------------------------------------------------
            // <auto-generated>
            //     This code was generated by DocTest.
            // </auto-generated>
            // ------------------------------------------------------------------
            namespace Tests;

            public partial class MyDocTests
            {
                [Xunit.Fact]
                public static async Task My_example()
                {
                    var __doctest_redirector = Benjamin.Pizza.DocTest.DocTestHelper.RedirectConsole();
                    using (__doctest_redirector)
                    {
                        Console.WriteLine("hello");
                        // Output:
                        // hello
                    }

                    Xunit.Assert.Equal("", __doctest_redirector.CapturedConsoleError);

                    Xunit.Assert.Equal(
                        [
                            "hello",
                            ""
                        ],
                        Benjamin.Pizza.DocTest.DocTestHelper.SplitLines(__doctest_redirector.CapturedConsoleOut)
                    );
                }
            }
            """));

        await test.RunAsync(TestContext.Current.CancellationToken);
    }
}
