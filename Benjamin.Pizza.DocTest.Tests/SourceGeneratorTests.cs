using Benjamin.Pizza.DocTest.SourceGenerator;
using Benjamin.Pizza.DocTest.TestProject;

using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Testing;
using Microsoft.CodeAnalysis.Testing;

using Xunit;

namespace Benjamin.Pizza.DocTest.Tests;

public class SourceGeneratorTests
{
    [Fact]
    public async Task TestSourceGenerator()
    {
        var test = new CSharpSourceGeneratorTest<DocTestSourceGenerator, DefaultVerifier>();
        test.TestState.AdditionalReferences.AddRange(GetTestReferences());
        test.TestState.AdditionalFiles.Add(await GetDocumentationXml(typeof(ExampleSut)));
        test.ReferenceAssemblies = ReferenceAssemblies.Net.Net90;

        test.TestState.Sources.Add(GetGlobalUsings());
        test.TestCode = """
            using Benjamin.Pizza.DocTest;
            using Benjamin.Pizza.DocTest.TestProject;

            namespace Benjamin.Pizza.DocTest.TestProject.Tests;

            [DocTest(typeof(ExampleSut), Usings = ["System.Reflection", "System.Runtime"])]
            public partial class MyDocTests
            {
            }
            """;

        foreach (var t in ExpectedInjectedSources())
        {
            test.TestState.GeneratedSources.Add(t);
        }

        test.TestState.GeneratedSources.Add((
            typeof(DocTestSourceGenerator),
            "MyDocTests.DocTest.g.cs",
            """
            // ------------------------------------------------------------------
            // <auto-generated>
            //     This code was generated by DocTest.
            // </auto-generated>
            // ------------------------------------------------------------------
            using System.Reflection;
            using System.Runtime;

            namespace Benjamin.Pizza.DocTest.TestProject.Tests;

            public partial class MyDocTests
            {
                [Xunit.Fact]
                [System.CodeDom.Compiler.GeneratedCode("Benjamin.Pizza.DocTest", "1.0.0")]
                #pragma warning disable CS1998 // Async method lacks 'await' operators and will run synchronously
                public static async Task My_example()
                #pragma warning restore CS1998 // Async method lacks 'await' operators and will run synchronously
                {
                    var __doctest_redirector = new Benjamin.Pizza.DocTest.ConsoleRedirector();
                    using (__doctest_redirector)
                    {
                        Console.WriteLine("hello");
                        // Output:
                        // hello
                    }

                    Xunit.Assert.Equal("", __doctest_redirector.CapturedConsoleError);
                    Xunit.Assert.Equal(
                        [
                            "hello",
                            ""
                        ],
                        __doctest_redirector.CapturedConsoleOut.Split(
                            ["\r\n", "\n"],
                            System.StringSplitOptions.None
                        )
                    );
                }
            }
            """));

        await test.RunAsync(TestContext.Current.CancellationToken);
    }

    private static IEnumerable<MetadataReference> GetTestReferences()
    {
        yield return MetadataReference.CreateFromFile(typeof(FactAttribute).Assembly.Location);
        yield return MetadataReference.CreateFromFile(typeof(Assert).Assembly.Location);
        yield return MetadataReference.CreateFromFile(typeof(ExampleSut).Assembly.Location);
    }

    private static async Task<(string Filename, string Content)> GetDocumentationXml(Type typeInAssemblyToDoctest)
    {
        var name = typeInAssemblyToDoctest.Assembly.GetName().Name + ".xml";
        return (
            name,
            await File.ReadAllTextAsync(name, TestContext.Current.CancellationToken)
        );
    }

    // https://github.com/dotnet/sdk/blob/3c66f856d197b3735077fff4e4806443d841a09e/src/Tasks/Microsoft.NET.Build.Tasks/targets/Microsoft.NET.Sdk.CSharp.props#L26
    private static string GetGlobalUsings() => """
        global using System;
        global using System.Collections.Generic;
        global using System.IO;
        global using System.Linq;
        global using System.Net.Http;
        global using System.Threading;
        global using System.Threading.Tasks;
        """;

    private static IEnumerable<(Type SourceGeneratorType, string Filename, string Content)> ExpectedInjectedSources()
    {
        yield return (
            typeof(DocTestSourceGenerator),
            "ConsoleRedirector.cs",
            DocTestSourceGenerator.ConsoleRedirectorSourceCode
        );
        yield return (
            typeof(DocTestSourceGenerator),
            "DocTestAttribute.cs",
            DocTestSourceGenerator.DocTestAttributeSourceCode
        );
    }
}
